// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class MATraceManager extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<MATraceManager> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::createMATraceManager');
    final object = MATraceManager()..refId = refId..tag = 'amap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<MATraceManager>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::create_batchMATraceManager', {'length': length});
  
    final List<MATraceManager> typedResult = resultBatch.map((result) => MATraceManager()..refId = result..tag = 'amap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(MATraceDelegate delegate) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('MATraceDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::MATraceDelegate::traceManagerDidTracecorrectdistancewithError':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: traceManagerDidTracecorrectdistancewithError([\'distance\':$args[distance]])');
            }
        
            // handle the native call
            delegate?.traceManagerDidTracecorrectdistancewithError(MATraceManager()..refId = (args['manager'])..tag = 'amap_map_fluttify', (args['locations'] as List).cast<int>().map((it) => CLLocation()..refId = it..tag = 'amap_map_fluttify').toList(), (args['tracePoints'] as List).cast<int>().map((it) => MATracePoint()..refId = it..tag = 'amap_map_fluttify').toList(), args['distance'], NSError()..refId = (args['error'])..tag = 'amap_map_fluttify');
            break;
          case 'Callback::MATraceDelegate::mapViewRequireLocationAuth':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: mapViewRequireLocationAuth([])');
            }
        
            // handle the native call
            delegate?.mapViewRequireLocationAuth(CLLocationManager()..refId = (args['locationManager'])..tag = 'amap_map_fluttify');
            break;
          default:
            break;
        }
      });
  }
  
  //endregion

  //region methods
  static Future<MATraceManager> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: MATraceManager::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(MATraceManager()..refId = result..tag = 'amap_map_fluttify');
      return MATraceManager()..refId = result..tag = 'amap_map_fluttify';
    }
  }
  
  Future<NSOperation> queryProcessedTraceWithTypeprocessingCallbackfinishCallbackfailedCallback(List<MATraceLocation> locations, AMapCoordinateType type, void processingCallback(int index, List<MATracePoint> points), void finishCallback(List<MATracePoint> points, double distance), void failedCallback(int errorCode, String errorDesc)) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: MATraceManager@$refId::queryProcessedTraceWith([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::queryProcessedTraceWithTypeprocessingCallbackfinishCallbackfailedCallback', {"locations": locations.map((it) => it.refId).toList(), "type": type.index, "refId": refId});
  
  
    // handle native call
    MethodChannel('MATraceManager::queryProcessedTraceWithTypeprocessingCallbackfinishCallbackfailedCallback::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::MAProcessingCallback::MAProcessingCallback':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              processingCallback(args['index'], (args['points'] as List).cast<int>().map((it) => MATracePoint()..refId = it..tag = 'amap_map_fluttify').toList());
              break;
            case 'Callback::MAFinishCallback::MAFinishCallback':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              finishCallback((args['points'] as List).cast<int>().map((it) => MATracePoint()..refId = it..tag = 'amap_map_fluttify').toList(), args['distance']);
              break;
            case 'Callback::MAFailedCallback::MAFailedCallback':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              failedCallback(args['errorCode'], args['errorDesc']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSOperation()..refId = result..tag = 'amap_map_fluttify');
      return NSOperation()..refId = result..tag = 'amap_map_fluttify';
    }
  }
  
  Future<void> start() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: MATraceManager@$refId::start([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::start', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stop() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: MATraceManager@$refId::stop([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::stop', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension MATraceManager_Batch on List<MATraceManager> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<List<MATraceManager>> sharedInstance_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::sharedInstance_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => MATraceManager()..refId = result..tag = 'amap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> start_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::start_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> stop_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MATraceManager::stop_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}