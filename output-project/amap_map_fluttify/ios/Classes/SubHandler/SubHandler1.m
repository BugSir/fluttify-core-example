//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    return @{
        @"MAMapViewDelegate::mapViewDidIndoorMapShowed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
            // ref arg
            MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
        
            // ref
            id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(%@, %@)", args[@"refId"], args[@"mapView"], args[@"indoorInfo"]);
            }
        
            // invoke native method
            [ref mapView : mapView didIndoorMapShowed: indoorInfo];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapViewDelegate::mapViewDidIndoorMapFloorIndexChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
            // ref arg
            MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
        
            // ref
            id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(%@, %@)", args[@"refId"], args[@"mapView"], args[@"indoorInfo"]);
            }
        
            // invoke native method
            [ref mapView : mapView didIndoorMapFloorIndexChanged: indoorInfo];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapViewDelegate::mapViewDidIndoorMapHidden": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
            // ref arg
            MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
        
            // ref
            id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(%@, %@)", args[@"refId"], args[@"mapView"], args[@"indoorInfo"]);
            }
        
            // invoke native method
            [ref mapView : mapView didIndoorMapHidden: indoorInfo];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapViewDelegate::offlineDataWillReload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
            // ref
            id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapViewDelegate@%@::offlineDataWillReload(%@)", args[@"refId"], args[@"mapView"]);
            }
        
            // invoke native method
            [ref offlineDataWillReload : mapView];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapViewDelegate::offlineDataDidReload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
            // ref
            id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapViewDelegate@%@::offlineDataDidReload(%@)", args[@"refId"], args[@"mapView"]);
            }
        
            // invoke native method
            [ref offlineDataDidReload : mapView];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAGroundOverlayRenderer::initWithGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAGroundOverlay* groundOverlay = (MAGroundOverlay*) HEAP[@([args[@"groundOverlay"] integerValue])];
        
            // ref
            MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGroundOverlayRenderer@%@::initWithGroundOverlay(%@)", args[@"refId"], args[@"groundOverlay"]);
            }
        
            // invoke native method
            MAGroundOverlayRenderer* result = [ref initWithGroundOverlay: groundOverlay];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"MACustomBuildingOverlayRenderer::initWithCustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MACustomBuildingOverlay* customBuildingOverlay = (MACustomBuildingOverlay*) HEAP[@([args[@"customBuildingOverlay"] integerValue])];
        
            // ref
            MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomBuildingOverlayRenderer@%@::initWithCustomBuildingOverlay(%@)", args[@"refId"], args[@"customBuildingOverlay"]);
            }
        
            // invoke native method
            MACustomBuildingOverlayRenderer* result = [ref initWithCustomBuildingOverlay: customBuildingOverlay];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"MAGroundOverlay::groundOverlayWithBoundsIcon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
                MACoordinateBounds bounds;
                [boundsValue getValue:&bounds];
                // ref arg
                UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
                // ref
        
        
                // invoke native method
                MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithBounds: bounds icon: icon];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAGroundOverlay::groundOverlayWithCoordinateZoomLevelicon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // ref arg
                UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
                // ref
        
        
                // invoke native method
                MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAGroundOverlay::setGroundOverlayWithBoundsIcon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
                MACoordinateBounds bounds;
                [boundsValue getValue:&bounds];
                // ref arg
                UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
                // ref
                MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setGroundOverlayWithBounds: bounds icon: icon];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAGroundOverlay::setGroundOverlayWithCoordinateZoomLevelicon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // ref arg
                UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
        
                // ref
                MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setGroundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolygonRenderer::initWithPolygon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAPolygon* polygon = (MAPolygon*) HEAP[@([args[@"polygon"] integerValue])];
        
                // ref
                MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAPolygonRenderer* result = [ref initWithPolygon: polygon];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAHeatMapGradient::initWithColorAndWithStartPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* colorsRefArray = (NSArray<NSNumber*> *) args[@"colors"];
                NSMutableArray<UIColor*>* colors = [NSMutableArray arrayWithCapacity:colorsRefArray.count];
                for (int i = 0; i < colorsRefArray.count; i++) {
                    UIColor* item = (UIColor*) HEAP[[colorsRefArray objectAtIndex:i]];
                    [colors addObject:item];
                }
                // jsonable arg
                NSArray<NSNumber*>* startPoints = (NSArray<NSNumber*>*) args[@"startPoints"];
        
                // ref
                MAHeatMapGradient* ref = (MAHeatMapGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAHeatMapGradient* result = [ref initWithColor: colors andWithStartPoints: startPoints];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapStatus::statusWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // jsonable arg
                CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
                // jsonable arg
                CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
                // struct arg
                NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
                CGPoint screenAnchor;
                [screenAnchorValue getValue:&screenAnchor];
        
                // ref
        
        
                // invoke native method
                MAMapStatus* result = [MAMapStatus statusWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapStatus::initWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // jsonable arg
                CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
                // jsonable arg
                CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
                // struct arg
                NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
                CGPoint screenAnchor;
                [screenAnchorValue getValue:&screenAnchor];
        
                // ref
                MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                id result = [ref initWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
        
                // result
                // return a ref
                HEAP[@(((NSObject*) result).hash)] = result;
                NSNumber* jsonableResult = @(((NSObject*) result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACircle::circleWithCenterCoordinateRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
                CLLocationCoordinate2D coord;
                [coordValue getValue:&coord];
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
        
                // ref
        
        
                // invoke native method
                MACircle* result = [MACircle circleWithCenterCoordinate: coord radius: radius];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACircle::circleWithMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
                MAMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
        
        
                // invoke native method
                MACircle* result = [MACircle circleWithMapRect: mapRect];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACircle::setCircleWithCenterCoordinateRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
                CLLocationCoordinate2D coord;
                [coordValue getValue:&coord];
                // jsonable arg
                CLLocationDistance radius = [args[@"radius"] doubleValue];
        
                // ref
                MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAArcRenderer::initWithArc_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAArc* arc = (MAArc*) HEAP[@([args[@"arc"] integerValue])];
        
                // ref
                MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAArcRenderer* result = [ref initWithArc: arc];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotation::setCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* newCoordinateValue = (NSValue*) HEAP[@([args[@"newCoordinate"] integerValue])];
                CLLocationCoordinate2D newCoordinate;
                [newCoordinateValue getValue:&newCoordinate];
        
                // ref
                id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCoordinate : newCoordinate];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnimatableAnnotation::step_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat timeDelta = [args[@"timeDelta"] floatValue];
        
                // ref
                id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref step : timeDelta];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnimatableAnnotation::isAnimationFinished_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref isAnimationFinished];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnimatableAnnotation::shouldAnimationStart_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref shouldAnimationStart];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnimatableAnnotation::rotateDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CLLocationDirection result = [ref rotateDegree];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolygon::polygonWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                MAPolygon* result = [MAPolygon polygonWithCoordinates: coords count: count];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolygon::polygonWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                MAMapPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    MAMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                MAPolygon* result = [MAPolygon polygonWithPoints: points count: count];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolygon::setPolygonWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                MAMapPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    MAMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setPolygonWithPoints: points count: count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolygon::setPolygonWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setPolygonWithCoordinates: coords count: count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverlay::particleOverlayWithOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAParticleOverlayOptions* option = (MAParticleOverlayOptions*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                MAParticleOverlay* result = [MAParticleOverlay particleOverlayWithOption: option];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverlay::updateOverlayOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAParticleOverlayOptions* overlayOption = (MAParticleOverlayOptions*) HEAP[@([args[@"overlayOption"] integerValue])];
        
                // ref
                MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref updateOverlayOption : overlayOption];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolyline::polylineWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                MAMapPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    MAMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                MAPolyline* result = [MAPolyline polylineWithPoints: points count: count];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolyline::polylineWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                MAPolyline* result = [MAPolyline polylineWithCoordinates: coords count: count];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolyline::setPolylineWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                MAMapPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    MAMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setPolylineWithPoints: points count: count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolyline::setPolylineWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setPolylineWithCoordinates: coords count: count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMultiColoredPolylineRenderer::initWithMultiPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
        
                // ref
                MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMultiColoredPolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnimatedAnnotation::setNeedsStart_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setNeedsStart ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMultiTexturePolylineRenderer::initWithMultiPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
        
                // ref
                MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMultiTexturePolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATileOverlayRenderer::initWithTileOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MATileOverlay* tileOverlay = (MATileOverlay*) HEAP[@([args[@"tileOverlay"] integerValue])];
        
                // ref
                MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MATileOverlayRenderer* result = [ref initWithTileOverlay: tileOverlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATileOverlayRenderer::reloadData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref reloadData ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATraceDelegate::traceManagerDidTracecorrectdistancewithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MATraceManager* manager = (MATraceManager*) HEAP[@([args[@"manager"] integerValue])];
                // list arg
                NSArray<NSNumber*>* locationsRefArray = (NSArray<NSNumber*> *) args[@"locations"];
                NSMutableArray<CLLocation*>* locations = [NSMutableArray arrayWithCapacity:locationsRefArray.count];
                for (int i = 0; i < locationsRefArray.count; i++) {
                    CLLocation* item = (CLLocation*) HEAP[[locationsRefArray objectAtIndex:i]];
                    [locations addObject:item];
                }
                // list arg
                NSArray<NSNumber*>* tracePointsRefArray = (NSArray<NSNumber*> *) args[@"tracePoints"];
                NSMutableArray<MATracePoint*>* tracePoints = [NSMutableArray arrayWithCapacity:tracePointsRefArray.count];
                for (int i = 0; i < tracePointsRefArray.count; i++) {
                    MATracePoint* item = (MATracePoint*) HEAP[[tracePointsRefArray objectAtIndex:i]];
                    [tracePoints addObject:item];
                }
                // jsonable arg
                double distance = [args[@"distance"] doubleValue];
                // ref arg
                NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
        
                // ref
                id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref traceManager : manager didTrace: locations correct: tracePoints distance: distance withError: error];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATraceDelegate::mapViewRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
        
                // ref
                id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewRequireLocationAuth : locationManager];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATraceManager::sharedInstance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                MATraceManager* result = [MATraceManager sharedInstance];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATraceManager::start_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref start ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATraceManager::stop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref stop ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMultiPointOverlayRendererDelegate::multiPointOverlayRendererDidItemTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMultiPointOverlayRenderer* renderer = (MAMultiPointOverlayRenderer*) HEAP[@([args[@"renderer"] integerValue])];
                // ref arg
                MAMultiPointItem* item = (MAMultiPointItem*) HEAP[@([args[@"item"] integerValue])];
        
                // ref
                id<MAMultiPointOverlayRendererDelegate> ref = (id<MAMultiPointOverlayRendererDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref multiPointOverlayRenderer : renderer didItemTapped: item];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMultiPointOverlayRenderer::initWithMultiPointOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMultiPointOverlay* multiPointOverlay = (MAMultiPointOverlay*) HEAP[@([args[@"multiPointOverlay"] integerValue])];
        
                // ref
                MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMultiPointOverlayRenderer* result = [ref initWithMultiPointOverlay: multiPointOverlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAPolylineRenderer::initWithPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAPolyline* polyline = (MAPolyline*) HEAP[@([args[@"polyline"] integerValue])];
        
                // ref
                MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAPolylineRenderer* result = [ref initWithPolyline: polyline];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::name_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSString* result = [ref name];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::coordinates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CLLocationCoordinate2D* result = [ref coordinates];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D*)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSUInteger result = [ref count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::duration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref duration];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::elapsedTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref elapsedTime];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::cancel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref cancel ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::isCancelled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref isCancelled];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationMoveAnimation::passedPointCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSInteger result = [ref passedPointCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationView::setSelectedAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL selected = [args[@"selected"] boolValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setSelected : selected animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationView::initWithAnnotationReuseIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
                // jsonable arg
                NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
                // ref
                MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
                // result
                // return a ref
                HEAP[@(((NSObject*) result).hash)] = result;
                NSNumber* jsonableResult = @(((NSObject*) result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationView::prepareForReuse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref prepareForReuse ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAAnnotationView::setDragStateAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                MAAnnotationViewDragState newDragState = (MAAnnotationViewDragState) [args[@"newDragState"] integerValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setDragState : newDragState animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATileOverlay::initWithURLTemplate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
                // ref
                MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                id result = [ref initWithURLTemplate: URLTemplate];
        
                // result
                // return a ref
                HEAP[@(((NSObject*) result).hash)] = result;
                NSNumber* jsonableResult = @(((NSObject*) result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MATileOverlay::cancelLoadOfTileAtPath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* pathValue = (NSValue*) HEAP[@([args[@"path"] integerValue])];
                MATileOverlayPath path;
                [pathValue getValue:&path];
        
                // ref
                MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref cancelLoadOfTileAtPath : path];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACustomCalloutView::initWithCustomView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                UIView* customView = (UIView*) HEAP[@([args[@"customView"] integerValue])];
        
                // ref
                MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                id result = [ref initWithCustomView: customView];
        
                // result
                // return a ref
                HEAP[@(((NSObject*) result).hash)] = result;
                NSNumber* jsonableResult = @(((NSObject*) result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::sharedOfflineMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                MAOfflineMap* result = [MAOfflineMap sharedOfflineMap];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::isDownloadingForItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
        
                // ref
                MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref isDownloadingForItem: item];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::pauseItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
        
                // ref
                MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref pauseItem: item];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::deleteItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
        
                // ref
                MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref deleteItem : item];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::cancelAll_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref cancelAll ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOfflineMap::clearDisk_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref clearDisk ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACircleRenderer::initWithCircle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MACircle* circle = (MACircle*) HEAP[@([args[@"circle"] integerValue])];
        
                // ref
                MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MACircleRenderer* result = [ref initWithCircle: circle];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverlayRenderer::initWithParticleOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAParticleOverlay* particleOverlay = (MAParticleOverlay*) HEAP[@([args[@"particleOverlay"] integerValue])];
        
                // ref
                MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleOverlayRenderer* result = [ref initWithParticleOverlay: particleOverlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleVelocityGenerate::getX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref getX];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleVelocityGenerate::getY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref getY];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleVelocityGenerate::getZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref getZ];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleRandomVelocityGenerate::initWithBoundaryValueX1Y1Z1X2Y2Z2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float x1 = [args[@"x1"] floatValue];
                // jsonable arg
                float y1 = [args[@"y1"] floatValue];
                // jsonable arg
                float z1 = [args[@"z1"] floatValue];
                // jsonable arg
                float x2 = [args[@"x2"] floatValue];
                // jsonable arg
                float y2 = [args[@"y2"] floatValue];
                // jsonable arg
                float z2 = [args[@"z2"] floatValue];
        
                // ref
                MAParticleRandomVelocityGenerate* ref = (MAParticleRandomVelocityGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleRandomVelocityGenerate* result = [ref initWithBoundaryValueX1: x1 Y1: y1 Z1: z1 X2: x2 Y2: y2 Z2: z2];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleRandomColorGenerate::initWithBoundaryColorR1G1B1A1R2G2B2A2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float r1 = [args[@"r1"] floatValue];
                // jsonable arg
                float g1 = [args[@"g1"] floatValue];
                // jsonable arg
                float b1 = [args[@"b1"] floatValue];
                // jsonable arg
                float a1 = [args[@"a1"] floatValue];
                // jsonable arg
                float r2 = [args[@"r2"] floatValue];
                // jsonable arg
                float g2 = [args[@"g2"] floatValue];
                // jsonable arg
                float b2 = [args[@"b2"] floatValue];
                // jsonable arg
                float a2 = [args[@"a2"] floatValue];
        
                // ref
                MAParticleRandomColorGenerate* ref = (MAParticleRandomColorGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleRandomColorGenerate* result = [ref initWithBoundaryColorR1: r1 G1: g1 B1: b1 A1: a1 R2: r2 G2: g2 B2: b2 A2: a2];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleRotationGenerate::getRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAParticleRotationGenerate> ref = (id<MAParticleRotationGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                float result = [ref getRotate];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleConstantRotationGenerate::initWithRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float rotate = [args[@"rotate"] floatValue];
        
                // ref
                MAParticleConstantRotationGenerate* ref = (MAParticleConstantRotationGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleConstantRotationGenerate* result = [ref initWithRotate: rotate];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleSizeGenerate::getSizeX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float timeFrame = [args[@"timeFrame"] floatValue];
        
                // ref
                id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                float result = [ref getSizeX: timeFrame];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleSizeGenerate::getSizeY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float timeFrame = [args[@"timeFrame"] floatValue];
        
                // ref
                id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                float result = [ref getSizeY: timeFrame];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleSizeGenerate::getSizeZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float timeFrame = [args[@"timeFrame"] floatValue];
        
                // ref
                id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                float result = [ref getSizeZ: timeFrame];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleCurveSizeGenerate::initWithCurveXYZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float x = [args[@"x"] floatValue];
                // jsonable arg
                float y = [args[@"y"] floatValue];
                // jsonable arg
                float z = [args[@"z"] floatValue];
        
                // ref
                MAParticleCurveSizeGenerate* ref = (MAParticleCurveSizeGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleCurveSizeGenerate* result = [ref initWithCurveX: x Y: y Z: z];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleEmissionModule::initWithEmissionRateRateTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int rate = [args[@"rate"] intValue];
                // jsonable arg
                int rateTime = [args[@"rateTime"] intValue];
        
                // ref
                MAParticleEmissionModule* ref = (MAParticleEmissionModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleEmissionModule* result = [ref initWithEmissionRate: rate rateTime: rateTime];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleShapeModule::isRatioEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                id<MAParticleShapeModule> ref = (id<MAParticleShapeModule>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref isRatioEnable];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleSinglePointShapeModule::initWithShapeXYZuseRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float x = [args[@"x"] floatValue];
                // jsonable arg
                float y = [args[@"y"] floatValue];
                // jsonable arg
                float z = [args[@"z"] floatValue];
                // jsonable arg
                BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
        
                // ref
                MAParticleSinglePointShapeModule* ref = (MAParticleSinglePointShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleSinglePointShapeModule* result = [ref initWithShapeX: x Y: y Z: z useRatio: isUseRatio];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleRectShapeModule::initWithLeftToprightbottomuseRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float left = [args[@"left"] floatValue];
                // jsonable arg
                float top = [args[@"top"] floatValue];
                // jsonable arg
                float right = [args[@"right"] floatValue];
                // jsonable arg
                float bottom = [args[@"bottom"] floatValue];
                // jsonable arg
                BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
        
                // ref
                MAParticleRectShapeModule* ref = (MAParticleRectShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAParticleRectShapeModule* result = [ref initWithLeft: left top: top right: right bottom: bottom useRatio: isUseRatio];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverLifeModule::setVelocityOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAParticleVelocityGenerate> velocity = (id<MAParticleVelocityGenerate>) HEAP[@([args[@"velocity"] integerValue])];
        
                // ref
                MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setVelocityOverLife : velocity];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverLifeModule::setRotationOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAParticleRotationGenerate> rotation = (id<MAParticleRotationGenerate>) HEAP[@([args[@"rotation"] integerValue])];
        
                // ref
                MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setRotationOverLife : rotation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverLifeModule::setSizeOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAParticleSizeGenerate> size = (id<MAParticleSizeGenerate>) HEAP[@([args[@"size"] integerValue])];
        
                // ref
                MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setSizeOverLife : size];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAParticleOverLifeModule::setColorOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAParticleColorGenerate> color = (id<MAParticleColorGenerate>) HEAP[@([args[@"color"] integerValue])];
        
                // ref
                MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setColorOverLife : color];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::initWithOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAOverlayRenderer* result = [ref initWithOverlay: overlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::getOffsetPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMapPoint result = [ref getOffsetPoint];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::getMapZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref getMapZoomLevel];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::glPointForMapPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
                MAMapPoint mapPoint;
                [mapPointValue getValue:&mapPoint];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGPoint result = [ref glPointForMapPoint: mapPoint];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::glPointsForMapPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* mapPointsRefIdArray = (NSArray*) args[@"mapPoints"];
                MAMapPoint mapPoints[mapPointsRefIdArray.count];
        
                for (int i = 0; i < mapPointsRefIdArray.count; i++) {
                    NSValue* mapPointsValue = (NSValue*) HEAP[[mapPointsRefIdArray objectAtIndex:i]];
                    MAMapPoint mapPointsItem;
                    [mapPointsValue getValue:&mapPointsItem];
                    mapPoints[i] = mapPointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::glWidthForWindowWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat windowWidth = [args[@"windowWidth"] floatValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGFloat result = [ref glWidthForWindowWidth: windowWidth];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthlooped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthloopedLineJoinTypeLineCapTypelineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
                // enum arg
                MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
                // enum arg
                MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
                // enum arg
                MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderTexturedLinesWithPointsPointCountlineWidthtextureIDsdrawStyleIndexeslooped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // list arg
                NSArray<NSNumber*>* textureIDsRefArray = (NSArray<NSNumber*> *) args[@"textureIDs"];
                NSMutableArray<NSArray*>* textureIDs = [NSMutableArray arrayWithCapacity:textureIDsRefArray.count];
                for (int i = 0; i < textureIDsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[textureIDsRefArray objectAtIndex:i]];
                    [textureIDs addObject:item];
                }
                // list arg
                NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
                NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
                for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
                    [drawStyleIndexes addObject:item];
                }
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureIDs: textureIDs drawStyleIndexes: drawStyleIndexes looped: looped];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorsdrawStyleIndexesisGradientlineWidthloopedLineJoinTypeLineCapTypelineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // list arg
                NSArray<NSNumber*>* strokeColorsRefArray = (NSArray<NSNumber*> *) args[@"strokeColors"];
                NSMutableArray<NSArray*>* strokeColors = [NSMutableArray arrayWithCapacity:strokeColorsRefArray.count];
                for (int i = 0; i < strokeColorsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[strokeColorsRefArray objectAtIndex:i]];
                    [strokeColors addObject:item];
                }
                // list arg
                NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
                NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
                for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
                    [drawStyleIndexes addObject:item];
                }
                // jsonable arg
                BOOL isGradient = [args[@"isGradient"] boolValue];
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
                // jsonable arg
                BOOL looped = [args[@"looped"] boolValue];
                // enum arg
                MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
                // enum arg
                MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
                // enum arg
                MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderLinesWithPoints : points pointCount: pointCount strokeColors: strokeColors drawStyleIndexes: drawStyleIndexes isGradient: isGradient lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderRegionWithPointsPointCountfillColorusingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
                // jsonable arg
                BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::renderStrokedRegionWithPointsPointCountfillColorstrokeColorstrokeLineWidthstrokeLineJoinTypestrokeLineDashusingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
                CGPoint points[pointsRefIdArray.count];
        
                for (int i = 0; i < pointsRefIdArray.count; i++) {
                    NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                    CGPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[i] = pointsItem;
                }
                // jsonable arg
                NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
                // jsonable arg
                CGFloat strokeLineWidth = [args[@"strokeLineWidth"] floatValue];
                // enum arg
                MALineJoinType strokeLineJoinType = (MALineJoinType) [args[@"strokeLineJoinType"] integerValue];
                // enum arg
                MALineDashType strokeLineDash = (MALineDashType) [args[@"strokeLineDash"] integerValue];
                // jsonable arg
                BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref renderStrokedRegionWithPoints : points pointCount: pointCount fillColor: fillColor strokeColor: strokeColor strokeLineWidth: strokeLineWidth strokeLineJoinType: strokeLineJoinType strokeLineDash: strokeLineDash usingTriangleFan: usingTriangleFan];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::glRender_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref glRender ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAOverlayRenderer::setNeedsUpdate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setNeedsUpdate ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMultiPointOverlay::initWithMultiPointItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* itemsRefArray = (NSArray<NSNumber*> *) args[@"items"];
                NSMutableArray<MAMultiPointItem*>* items = [NSMutableArray arrayWithCapacity:itemsRefArray.count];
                for (int i = 0; i < itemsRefArray.count; i++) {
                    MAMultiPointItem* item = (MAMultiPointItem*) HEAP[[itemsRefArray objectAtIndex:i]];
                    [items addObject:item];
                }
        
                // ref
                MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMultiPointOverlay* result = [ref initWithMultiPointItems: items];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACustomBuildingOverlayOption::optionWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                MACustomBuildingOverlayOption* result = [MACustomBuildingOverlayOption optionWithCoordinates: coords count: count];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACustomBuildingOverlayOption::setOptionWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
                for (int i = 0; i < coordsRefIdArray.count; i++) {
                    NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[i] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref setOptionWithCoordinates: coords count: count];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACustomBuildingOverlay::addCustomOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
                MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addCustomOption : option];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MACustomBuildingOverlay::removeCustomOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
                MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref removeCustomOption : option];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAArc::arcWithStartCoordinatePassedCoordinateendCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* startCoordinateValue = (NSValue*) HEAP[@([args[@"startCoordinate"] integerValue])];
                CLLocationCoordinate2D startCoordinate;
                [startCoordinateValue getValue:&startCoordinate];
                // struct arg
                NSValue* passedCoordinateValue = (NSValue*) HEAP[@([args[@"passedCoordinate"] integerValue])];
                CLLocationCoordinate2D passedCoordinate;
                [passedCoordinateValue getValue:&passedCoordinate];
                // struct arg
                NSValue* endCoordinateValue = (NSValue*) HEAP[@([args[@"endCoordinate"] integerValue])];
                CLLocationCoordinate2D endCoordinate;
                [endCoordinateValue getValue:&endCoordinate];
        
                // ref
        
        
                // invoke native method
                MAArc* result = [MAArc arcWithStartCoordinate: startCoordinate passedCoordinate: passedCoordinate endCoordinate: endCoordinate];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setRegionAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
                MACoordinateRegion region;
                [regionValue getValue:&region];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setRegion : region animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::regionThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
                MACoordinateRegion region;
                [regionValue getValue:&region];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MACoordinateRegion result = [ref regionThatFits: region];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setVisibleMapRectAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
                MAMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::mapRectThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
                MAMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMapRect result = [ref mapRectThatFits: mapRect];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::mapRectThatFitsEdgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
                MAMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setVisibleMapRectEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
                MAMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setCenterCoordinateAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCenterCoordinate : coordinate animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setZoomLevelAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setZoomLevel : zoomLevel animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setZoomLevelAtPivotanimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // struct arg
                NSValue* pivotValue = (NSValue*) HEAP[@([args[@"pivot"] integerValue])];
                CGPoint pivot;
                [pivotValue getValue:&pivot];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setZoomLevel : zoomLevel atPivot: pivot animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setRotationDegreeAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
                // jsonable arg
                CFTimeInterval duration = [args[@"duration"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setRotationDegree : rotationDegree animated: animated duration: duration];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setCameraDegreeAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
                // jsonable arg
                CFTimeInterval duration = [args[@"duration"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCameraDegree : cameraDegree animated: animated duration: duration];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::getMapStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAMapStatus* result = [ref getMapStatus];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setMapStatusAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setMapStatus : status animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setMapStatusAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
                // jsonable arg
                CFTimeInterval duration = [args[@"duration"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setMapStatus : status animated: animated duration: duration];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setCompassImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCompassImage : image];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::metersPerPointForZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                double result = [ref metersPerPointForZoomLevel: zoomLevel];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::convertCoordinateToPointToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // ref arg
                UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::convertPointToCoordinateFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
                CGPoint point;
                [pointValue getValue:&point];
                // ref arg
                UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::convertRegionToRectToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
                MACoordinateRegion region;
                [regionValue getValue:&region];
                // ref arg
                UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                CGRect result = [ref convertRegion: region toRectToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::convertRectToRegionFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
                CGRect rect;
                [rectValue getValue:&rect];
                // ref arg
                UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MACoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::reloadMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref reloadMap ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::clearDisk_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref clearDisk ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::reloadInternalTexture_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref reloadInternalTexture ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::mapContentApprovalNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSString* result = [ref mapContentApprovalNumber];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::satelliteImageApprovalNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSString* result = [ref satelliteImageApprovalNumber];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::forceRefresh_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref forceRefresh ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
                NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
                for (int i = 0; i < annotationsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                    [annotations addObject:item];
                }
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::removeAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref removeAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::removeAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
                NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
                for (int i = 0; i < annotationsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                    [annotations addObject:item];
                }
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref removeAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::viewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAAnnotationView* result = [ref viewForAnnotation: annotation];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::dequeueReusableAnnotationViewWithIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* identifier = (NSString*) args[@"identifier"];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::selectAnnotationAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref selectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::deselectAnnotationAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref deselectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::showAnnotationsAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
                NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
                for (int i = 0; i < annotationsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                    [annotations addObject:item];
                }
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref showAnnotations : annotations animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::showAnnotationsEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
                NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
                for (int i = 0; i < annotationsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                    [annotations addObject:item];
                }
                // struct arg
                NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref showAnnotations : annotations edgePadding: insets animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setUserTrackingModeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setUserTrackingMode : mode animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::updateUserLocationRepresentation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAUserLocationRepresentation* representation = (MAUserLocationRepresentation*) HEAP[@([args[@"representation"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref updateUserLocationRepresentation : representation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::overlaysInLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSArray* result = [ref overlaysInLevel: level];
        
                // result
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int i = 0; i < result.count; i++) {
                    NSObject* object = [result objectAtIndex:i];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addOverlay : overlay];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
                NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
                for (int i = 0; i < overlaysRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                    [overlays addObject:item];
                }
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addOverlays : overlays];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addOverlayLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
                // enum arg
                MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addOverlay : overlay level: level];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::addOverlaysLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
                NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
                for (int i = 0; i < overlaysRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                    [overlays addObject:item];
                }
                // enum arg
                MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref addOverlays : overlays level: level];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::removeOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref removeOverlay : overlay];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::removeOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
                NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
                for (int i = 0; i < overlaysRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                    [overlays addObject:item];
                }
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref removeOverlays : overlays];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::insertOverlayAtIndexlevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
                // jsonable arg
                NSUInteger index = [args[@"index"] unsignedIntegerValue];
                // enum arg
                MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref insertOverlay : overlay atIndex: index level: level];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::insertOverlayAboveOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
                // ref arg
                id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref insertOverlay : overlay aboveOverlay: sibling];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::insertOverlayBelowOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
                // ref arg
                id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref insertOverlay : overlay belowOverlay: sibling];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::insertOverlayAtIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
                // jsonable arg
                NSUInteger index = [args[@"index"] unsignedIntegerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref insertOverlay : overlay atIndex: index];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
                // jsonable arg
                NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndexatLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
                // jsonable arg
                NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
                // enum arg
                MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2 atLevel: level];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::exchangeOverlayWithOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay1 = (id<MAOverlay>) HEAP[@([args[@"overlay1"] integerValue])];
                // ref arg
                id<MAOverlay> overlay2 = (id<MAOverlay>) HEAP[@([args[@"overlay2"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref exchangeOverlay : overlay1 withOverlay: overlay2];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::rendererForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAOverlayRenderer* result = [ref rendererForOverlay: overlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::showOverlaysAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
                NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
                for (int i = 0; i < overlaysRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                    [overlays addObject:item];
                }
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref showOverlays : overlays animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::showOverlaysEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
                NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
                for (int i = 0; i < overlaysRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                    [overlays addObject:item];
                }
                // struct arg
                NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref showOverlays : overlays edgePadding: insets animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setIndoorMapControlOrigin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // struct arg
                NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
                CGPoint origin;
                [originValue getValue:&origin];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setIndoorMapControlOrigin : origin];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setCurrentIndoorMapFloorIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger floorIndex = [args[@"floorIndex"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCurrentIndoorMapFloorIndex : floorIndex];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::clearIndoorMapCache_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref clearIndoorMapCache ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapView::setCustomMapStyleOptions_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapCustomStyleOptions* styleOptions = (MAMapCustomStyleOptions*) HEAP[@([args[@"styleOptions"] integerValue])];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setCustomMapStyleOptions : styleOptions];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewRegionChanged_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewRegionChanged : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewRegionWillChangeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView regionWillChangeAnimated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewRegionDidChangeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView regionDidChangeAnimated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewMapWillMoveByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView mapWillMoveByUser: wasUserAction];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewMapDidMoveByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView mapDidMoveByUser: wasUserAction];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewMapWillZoomByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView mapWillZoomByUser: wasUserAction];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewMapDidZoomByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView mapDidZoomByUser: wasUserAction];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewWillStartLoadingMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewWillStartLoadingMap : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidFinishLoadingMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewDidFinishLoadingMap : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidFailLoadingMapWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewDidFailLoadingMap : mapView withError: error];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewViewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAAnnotationView* result = [ref mapView: mapView viewForAnnotation: annotation];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidAddAnnotationViews_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // list arg
                NSArray<NSNumber*>* viewsRefArray = (NSArray<NSNumber*> *) args[@"views"];
                NSMutableArray<NSArray*>* views = [NSMutableArray arrayWithCapacity:viewsRefArray.count];
                for (int i = 0; i < viewsRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[viewsRefArray objectAtIndex:i]];
                    [views addObject:item];
                }
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didAddAnnotationViews: views];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidSelectAnnotationView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didSelectAnnotationView: view];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidDeselectAnnotationView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didDeselectAnnotationView: view];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewWillStartLocatingUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewWillStartLocatingUser : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidStopLocatingUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewDidStopLocatingUser : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidUpdateUserLocationupdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAUserLocation* userLocation = (MAUserLocation*) HEAP[@([args[@"userLocation"] integerValue])];
                // jsonable arg
                BOOL updatingLocation = [args[@"updatingLocation"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didUpdateUserLocation: userLocation updatingLocation: updatingLocation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapViewRequireLocationAuth : locationManager];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidFailToLocateUserWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didFailToLocateUserWithError: error];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
                // enum arg
                MAAnnotationViewDragState newState = (MAAnnotationViewDragState) [args[@"newState"] integerValue];
                // enum arg
                MAAnnotationViewDragState oldState = (MAAnnotationViewDragState) [args[@"oldState"] integerValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView annotationView: view didChangeDragState: newState fromOldState: oldState];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewRendererForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                MAOverlayRenderer* result = [ref mapView: mapView rendererForOverlay: overlay];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidAddOverlayRenderers_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // list arg
                NSArray<NSNumber*>* overlayRenderersRefArray = (NSArray<NSNumber*> *) args[@"overlayRenderers"];
                NSMutableArray<NSArray*>* overlayRenderers = [NSMutableArray arrayWithCapacity:overlayRenderersRefArray.count];
                for (int i = 0; i < overlayRenderersRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[overlayRenderersRefArray objectAtIndex:i]];
                    [overlayRenderers addObject:item];
                }
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didAddOverlayRenderers: overlayRenderers];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewAnnotationViewcalloutAccessoryControlTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
                // ref arg
                UIControl* control = (UIControl*) HEAP[@([args[@"control"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView annotationView: view calloutAccessoryControlTapped: control];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidAnnotationViewCalloutTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didAnnotationViewCalloutTapped: view];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidAnnotationViewTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didAnnotationViewTapped: view];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidChangeUserTrackingModeanimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // enum arg
                MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didChangeUserTrackingMode: mode animated: animated];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidChangeOpenGLESDisabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // jsonable arg
                BOOL openGLESDisabled = [args[@"openGLESDisabled"] boolValue];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didChangeOpenGLESDisabled: openGLESDisabled];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidTouchPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // list arg
                NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
                NSMutableArray<NSArray*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
                for (int i = 0; i < poisRefArray.count; i++) {
                    NSArray* item = (NSArray*) HEAP[[poisRefArray objectAtIndex:i]];
                    [pois addObject:item];
                }
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didTouchPois: pois];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidSingleTappedAtCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didSingleTappedAtCoordinate: coordinate];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidLongPressedAtCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // struct arg
                NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didLongPressedAtCoordinate: coordinate];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapInitComplete_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapInitComplete : mapView];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"MAMapViewDelegate::mapViewDidIndoorMapShowed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
                // ref arg
                MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
        
                // ref
                id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref mapView : mapView didIndoorMapShowed: indoorInfo];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
    };
}

@end
